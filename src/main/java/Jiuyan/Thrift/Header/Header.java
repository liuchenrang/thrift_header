/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Jiuyan.Thrift.Header;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-09-27")
public class Header implements org.apache.thrift.TBase<Header, Header._Fields>, java.io.Serializable, Cloneable, Comparable<Header> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Header");

  private static final org.apache.thrift.protocol.TField TRACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("trace_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("span_id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PARENT_SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parent_span_id", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HeaderStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HeaderTupleSchemeFactory());
  }

  public String trace_id; // required
  public String span_id; // required
  public String parent_span_id; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRACE_ID((short)1, "trace_id"),
    SPAN_ID((short)2, "span_id"),
    PARENT_SPAN_ID((short)3, "parent_span_id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRACE_ID
          return TRACE_ID;
        case 2: // SPAN_ID
          return SPAN_ID;
        case 3: // PARENT_SPAN_ID
          return PARENT_SPAN_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRACE_ID, new org.apache.thrift.meta_data.FieldMetaData("trace_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("span_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("parent_span_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Header.class, metaDataMap);
  }

  public Header() {
  }

  public Header(
    String trace_id,
    String span_id,
    String parent_span_id)
  {
    this();
    this.trace_id = trace_id;
    this.span_id = span_id;
    this.parent_span_id = parent_span_id;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Header(Header other) {
    if (other.isSetTrace_id()) {
      this.trace_id = other.trace_id;
    }
    if (other.isSetSpan_id()) {
      this.span_id = other.span_id;
    }
    if (other.isSetParent_span_id()) {
      this.parent_span_id = other.parent_span_id;
    }
  }

  public Header deepCopy() {
    return new Header(this);
  }

  @Override
  public void clear() {
    this.trace_id = null;
    this.span_id = null;
    this.parent_span_id = null;
  }

  public String getTrace_id() {
    return this.trace_id;
  }

  public Header setTrace_id(String trace_id) {
    this.trace_id = trace_id;
    return this;
  }

  public void unsetTrace_id() {
    this.trace_id = null;
  }

  /** Returns true if field trace_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTrace_id() {
    return this.trace_id != null;
  }

  public void setTrace_idIsSet(boolean value) {
    if (!value) {
      this.trace_id = null;
    }
  }

  public String getSpan_id() {
    return this.span_id;
  }

  public Header setSpan_id(String span_id) {
    this.span_id = span_id;
    return this;
  }

  public void unsetSpan_id() {
    this.span_id = null;
  }

  /** Returns true if field span_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSpan_id() {
    return this.span_id != null;
  }

  public void setSpan_idIsSet(boolean value) {
    if (!value) {
      this.span_id = null;
    }
  }

  public String getParent_span_id() {
    return this.parent_span_id;
  }

  public Header setParent_span_id(String parent_span_id) {
    this.parent_span_id = parent_span_id;
    return this;
  }

  public void unsetParent_span_id() {
    this.parent_span_id = null;
  }

  /** Returns true if field parent_span_id is set (has been assigned a value) and false otherwise */
  public boolean isSetParent_span_id() {
    return this.parent_span_id != null;
  }

  public void setParent_span_idIsSet(boolean value) {
    if (!value) {
      this.parent_span_id = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRACE_ID:
      if (value == null) {
        unsetTrace_id();
      } else {
        setTrace_id((String)value);
      }
      break;

    case SPAN_ID:
      if (value == null) {
        unsetSpan_id();
      } else {
        setSpan_id((String)value);
      }
      break;

    case PARENT_SPAN_ID:
      if (value == null) {
        unsetParent_span_id();
      } else {
        setParent_span_id((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRACE_ID:
      return getTrace_id();

    case SPAN_ID:
      return getSpan_id();

    case PARENT_SPAN_ID:
      return getParent_span_id();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRACE_ID:
      return isSetTrace_id();
    case SPAN_ID:
      return isSetSpan_id();
    case PARENT_SPAN_ID:
      return isSetParent_span_id();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Header)
      return this.equals((Header)that);
    return false;
  }

  public boolean equals(Header that) {
    if (that == null)
      return false;

    boolean this_present_trace_id = true && this.isSetTrace_id();
    boolean that_present_trace_id = true && that.isSetTrace_id();
    if (this_present_trace_id || that_present_trace_id) {
      if (!(this_present_trace_id && that_present_trace_id))
        return false;
      if (!this.trace_id.equals(that.trace_id))
        return false;
    }

    boolean this_present_span_id = true && this.isSetSpan_id();
    boolean that_present_span_id = true && that.isSetSpan_id();
    if (this_present_span_id || that_present_span_id) {
      if (!(this_present_span_id && that_present_span_id))
        return false;
      if (!this.span_id.equals(that.span_id))
        return false;
    }

    boolean this_present_parent_span_id = true && this.isSetParent_span_id();
    boolean that_present_parent_span_id = true && that.isSetParent_span_id();
    if (this_present_parent_span_id || that_present_parent_span_id) {
      if (!(this_present_parent_span_id && that_present_parent_span_id))
        return false;
      if (!this.parent_span_id.equals(that.parent_span_id))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_trace_id = true && (isSetTrace_id());
    list.add(present_trace_id);
    if (present_trace_id)
      list.add(trace_id);

    boolean present_span_id = true && (isSetSpan_id());
    list.add(present_span_id);
    if (present_span_id)
      list.add(span_id);

    boolean present_parent_span_id = true && (isSetParent_span_id());
    list.add(present_parent_span_id);
    if (present_parent_span_id)
      list.add(parent_span_id);

    return list.hashCode();
  }

  @Override
  public int compareTo(Header other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTrace_id()).compareTo(other.isSetTrace_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrace_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trace_id, other.trace_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpan_id()).compareTo(other.isSetSpan_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpan_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.span_id, other.span_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParent_span_id()).compareTo(other.isSetParent_span_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParent_span_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parent_span_id, other.parent_span_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Header(");
    boolean first = true;

    sb.append("trace_id:");
    if (this.trace_id == null) {
      sb.append("null");
    } else {
      sb.append(this.trace_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("span_id:");
    if (this.span_id == null) {
      sb.append("null");
    } else {
      sb.append(this.span_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parent_span_id:");
    if (this.parent_span_id == null) {
      sb.append("null");
    } else {
      sb.append(this.parent_span_id);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HeaderStandardSchemeFactory implements SchemeFactory {
    public HeaderStandardScheme getScheme() {
      return new HeaderStandardScheme();
    }
  }

  private static class HeaderStandardScheme extends StandardScheme<Header> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Header struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.trace_id = iprot.readString();
              struct.setTrace_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.span_id = iprot.readString();
              struct.setSpan_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARENT_SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parent_span_id = iprot.readString();
              struct.setParent_span_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Header struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.trace_id != null) {
        oprot.writeFieldBegin(TRACE_ID_FIELD_DESC);
        oprot.writeString(struct.trace_id);
        oprot.writeFieldEnd();
      }
      if (struct.span_id != null) {
        oprot.writeFieldBegin(SPAN_ID_FIELD_DESC);
        oprot.writeString(struct.span_id);
        oprot.writeFieldEnd();
      }
      if (struct.parent_span_id != null) {
        oprot.writeFieldBegin(PARENT_SPAN_ID_FIELD_DESC);
        oprot.writeString(struct.parent_span_id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HeaderTupleSchemeFactory implements SchemeFactory {
    public HeaderTupleScheme getScheme() {
      return new HeaderTupleScheme();
    }
  }

  private static class HeaderTupleScheme extends TupleScheme<Header> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Header struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTrace_id()) {
        optionals.set(0);
      }
      if (struct.isSetSpan_id()) {
        optionals.set(1);
      }
      if (struct.isSetParent_span_id()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetTrace_id()) {
        oprot.writeString(struct.trace_id);
      }
      if (struct.isSetSpan_id()) {
        oprot.writeString(struct.span_id);
      }
      if (struct.isSetParent_span_id()) {
        oprot.writeString(struct.parent_span_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Header struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.trace_id = iprot.readString();
        struct.setTrace_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.span_id = iprot.readString();
        struct.setSpan_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.parent_span_id = iprot.readString();
        struct.setParent_span_idIsSet(true);
      }
    }
  }

}

